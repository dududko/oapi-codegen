// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	_ "embed"
	"fmt"
	"net/http"
	"net/url"
	"path"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx FindPetsContext, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx AddPetContext) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx DeletePetContext, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetById(ctx FindPetByIdContext, id int64) error
}

type FindPetsContext struct {
	echo.Context
}

func (c *FindPetsContext) JSON200(resp []Pet) error {
	return c.JSON(200, resp)
}

type AddPetContext struct {
	echo.Context
}

func (c *AddPetContext) JSON200(resp Pet) error {
	return c.JSON(200, resp)
}

func (c *AddPetContext) BindJSON() (*AddPetJSONBody, error) {
	var err error

	// optional
	if c.Request().ContentLength == 0 {
		return nil, errors.New("the request body should not be empty")
	}

	ctype := c.Request().Header.Get(echo.HeaderContentType)
	if ctype != "application/json" {
		err = errors.New(fmt.Sprintf("incorrect content type: %s", ctype))
		return nil, err
	}

	var result AddPetJSONBody
	if err = c.Bind(&result); err != nil {
		return nil, err
	}

	return &result, nil
}

type DeletePetContext struct {
	echo.Context
}

type FindPetByIdContext struct {
	echo.Context
}

func (c *FindPetByIdContext) JSON200(resp Pet) error {
	return c.JSON(200, resp)
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler func(echo.Context) ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler(ctx).FindPets(FindPetsContext{ctx}, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler(ctx).AddPet(AddPetContext{ctx})
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler(ctx).DeletePet(DeletePetContext{ctx}, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler(ctx).FindPetById(FindPetByIdContext{ctx}, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, pathPrefix string) {

	wrapper := ServerInterfaceWrapper{
		Handler: func(echo.Context) ServerInterface {
			return si
		},
	}
	wrapper.RegisterHandlers(router, pathPrefix)

}

func (wrapper ServerInterfaceWrapper) RegisterHandlers(router EchoRouter, pathPrefix string) {
	router.GET(path.Join(pathPrefix, "/pets"), wrapper.FindPets)
	router.POST(path.Join(pathPrefix, "/pets"), wrapper.AddPet)
	router.DELETE(path.Join(pathPrefix, "/pets/:id"), wrapper.DeletePet)
	router.GET(path.Join(pathPrefix, "/pets/:id"), wrapper.FindPetById)

}

//go:embed petstore-expanded.yaml
var spec []byte

// returns a raw spec
func RawSpec() []byte {
	return spec
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathPrefix string) map[string]func() []byte {
	// todo: fix spec validator so that external references are correct;
	// now they can point to api.yaml files whereas the real file name is different
	var res = map[string]func() []byte{
		path.Join(pathPrefix, "petstore-expanded.yaml"): RawSpec,
		path.Join(pathPrefix, "api.yaml"):               RawSpec,
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		if spec, ok := resolvePath[pathToFile]; !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		} else {
			return spec(), nil
		}
	}
	swagger, err = loader.LoadSwaggerFromData(spec)
	if err != nil {
		return
	}
	return
}
